
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Параметры.Свойство("ТекстЗапроса", ТекстЗапроса) Тогда
		Элементы.ФормаПеренестиВОтчет.Видимость = Ложь;	
	КонецЕсли;
	
	МассивИменПараметров = Новый Массив;
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	Если Параметры.Свойство("ПараметрыЗапроса", МассивИменПараметров) Тогда
		ЗаполнитьИменаПараметров(МассивИменПараметров, СхемаКомпоновкиДанных);
	КонецЕсли;
	
	АдресСКД = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);	
	
	ИнициализироватьНастройкиСКД();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИменаПараметров(МассивИменПараметров, СхемаКомпоновкиДанных)
	
	Для Каждого ИмяПараметра Из МассивИменПараметров Цикл
		
		НоваяСтрокаПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		НоваяСтрокаПараметр.Имя = ИмяПараметра;
		НоваяСтрокаПараметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиСКД()
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСКД);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВОтчет(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтветОСохранении", ЭтотОбъект);
	
	ТекстВопроса = "Перенести в отчет текст запроса, параметры " + Формат(ЗаполнятьПоля, "БЛ=; БИ='и поля '") + "?";
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,, "Сохранение данных");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветОСохранении(Ответ, ДопПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВладелецФормы.Объект.ТекстЗапроса = ТекстЗапроса;
		
		ПеренестиПараметрыЗапроса();
		
		ПеренестиПоляЗапроса();
		
		Закрыть(Истина);
		
	Иначе
		Закрыть();
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПараметрыЗапроса()	
	
	Для Каждого СтрокаПараметра Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл
		
		СтруктураПоиска = Новый Структура("Наименование", Строка(СтрокаПараметра.Параметр));
		
		НайденныеСтроки = ВладелецФормы.Объект.ПараметрыЗапроса.НайтиСтроки(СтруктураПоиска);
		
		Если Не НайденныеСтроки.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ВладелецФормы.Объект.ПараметрыЗапроса.Добавить(), СтруктураПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПоляЗапроса()
	
	Если Не ЗаполнятьПоля Тогда	
		Возврат;	
	КонецЕсли;	
	
	ВладелецФормы.Объект.ПоляЗапроса.Очистить();
	
	Для Каждого СтрокаДанных Из ТаблицаПолей Цикл
		ЗаполнитьЗначенияСвойств(ВладелецФормы.Объект.ПоляЗапроса.Добавить(), СтрокаДанных);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Функция НачатьВыполнениеЗапроса(ТекстЗапроса, ИнформацияОВыполнении = Неопределено)
	
	ОбщееВремяНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РезультатВыполнения = ВыполнитьЗапросНаСервере(ТекстЗапроса, ИнформацияОВыполнении);
	
	ТекущаяДатаПреобразованиеJSONНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();	
	Результат = КликХаусСервер.ПреобразоватьИнформациюОВыполненииВТабличныйДокумент(ИнформацияОВыполнении, РезультатВыполнения);
	ТекущаяДатаПреобразованиеJSONКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	Если Не ИнформацияОВыполнении = Неопределено Тогда
		ИнформацияОВыполнении.Вставить("ОбщееВремя", (ТекущаяДатаПреобразованиеJSONКонец - ОбщееВремяНачало) / 1000);
		ИнформацияОВыполнении.Вставить("ВремяПреобразования", (ТекущаяДатаПреобразованиеJSONКонец - ТекущаяДатаПреобразованиеJSONНачало) / 1000);
	КонецЕсли;
	
	Если ЗаполнятьПоля Тогда
		ЗаполнитьНаименованияПолей(ИнформацияОВыполнении);
	КонецЕсли;
	
	Возврат ЗаполнитьИнформацию(ИнформацияОВыполнении)
	
КонецФункции

&НаСервере
Функция ВыполнитьЗапросНаСервере(ТекстЗапроса, ИнформацияОВыполнении)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	
	ТекстЗапросаСервер = КликХаусСервер.ЗаполнитьПараметрыДанных(ТекстЗапроса, КомпоновщикНастроек.ПолучитьНастройки(), СхемаКомпоновкиДанных);
	
	Возврат КликХаусСервер.ВыполнитьЗапросНаСервере(ТекстЗапросаСервер, ИнформацияОВыполнении);
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьИнформацию(ИнформацияОВыполнении)
	
	Если ИнформацияОВыполнении = Неопределено Тогда
		ПрочитаноБайт = 0;
		ПрочитаноВремя = 0;
		ПрочитаноСтрок = 0;
		КоличествоСтрок = 0;   
		ВремяВыполненияHTTP = 0;
		ВремяПреобразованияJSON = 0;
		ВремяЧтенияJSON = 0;
		ОбщееВремяВыполнения = 0;
		
		Возврат Ложь;
		
	Иначе
		ПрочитаноБайт = ИнформацияОВыполнении.statistics.bytes_read;
		ПрочитаноВремя = ИнформацияОВыполнении.statistics.elapsed;
		ПрочитаноСтрок = ИнформацияОВыполнении.statistics.rows_read;
		КоличествоСтрок = ИнформацияОВыполнении.rows;
		ВремяВыполненияHTTP = ИнформацияОВыполнении.ВремяВыполненияHTTPЗапроса;
		ВремяПреобразованияJSON = ИнформацияОВыполнении.ВремяПреобразования;
		ВремяЧтенияJSON =  ИнформацияОВыполнении.ВремяЧтенияJSON;
		ОбщееВремяВыполнения = ИнформацияОВыполнении.ОбщееВремя;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНаименованияПолей(ИнформацияОВыполнении)
	
	ТаблицаПолей.Очистить();
	
	Если ИнформацияОВыполнении = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСтруктуры Из ИнформацияОВыполнении.meta Цикл
		НоваСтрока = ТаблицаПолей.Добавить();
		НоваСтрока.Наименование = СтрокаСтруктуры.name;
		НоваСтрока.Тип = ОпределитьТипПоля(СтрокаСтруктуры.type);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОпределитьТипПоля(ТипПоляCH)
	
	Если ТипПоляCH = "String" Тогда
		Возврат "Строка";
		
	ИначеЕсли Не СтрНайти(НРег(ТипПоляCH), "int") = 0 
		     ИЛИ Не СтрНайти(НРег(ТипПоляCH), "float") = 0 Тогда 
		Возврат 9.99;
		
	ИначеЕсли Не СтрНайти(НРег(ТипПоляCH), "date") = 0 Тогда 
		Возврат Дата(1970,1,1);
		
	Иначе
		Возврат "Строка";
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура ПолучитьСписокБаз(Команда)
	
	ИнформацияОВыполнении = Неопределено;
	Элементы.ИмяБазы.СписокВыбора.Очистить();
	
	Если Не НачатьВыполнениеЗапроса("show databases", ИнформацияОВыполнении) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаДанных Из ИнформацияОВыполнении.data Цикл
		Элементы.ИмяБазы.СписокВыбора.Добавить(СтрокаДанных.name);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСписокТаблиц(Команда)
	
	ИнформацияОВыполнении = Неопределено;
	Элементы.ИмяТаблицы.СписокВыбора.Очистить();
	
	Если Не ПустаяСтрока(ИмяБазы) Тогда
		ТекстЗапросаСервер = "show tables from " + ИмяБазы;
	Иначе
		ТекстЗапросаСервер = "show tables";
	КонецЕсли;
	
	Если Не НачатьВыполнениеЗапроса(ТекстЗапросаСервер, ИнформацияОВыполнении) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из ИнформацияОВыполнении.data Цикл
		Элементы.ИмяТаблицы.СписокВыбора.Добавить(СтрокаДанных.name);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьОписаниеТаблицы(Команда)
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Сообщить("Заполните наименование таблицы");
		Возврат;
	КонецЕсли;
		
	
	Если ЗначениеЗаполнено(ИмяБазы) Тогда
		ТекстЗапросаСервер = "desc " + ИмяБазы + "." + ИмяТаблицы;
	Иначе
		ТекстЗапросаСервер = "desc " + ИмяБазы;
	КонецЕсли;
	
	НачатьВыполнениеЗапроса(ТекстЗапросаСервер)
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗапрос(Команда)
	НачатьВыполнениеЗапроса(ТекстЗапроса);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПараметры(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеВыбораПараметра", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораТипаЗначения",, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗакрытиеВыбораПараметра(СтруктураТипа, ДопПараметры) Экспорт
	
	Если СтруктураТипа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьПараметрВСхемуНаСервере(СтруктураТипа); 
	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрВСхемуНаСервере(СтруктураТипа)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	
	НоваяСтрокаПараметр = СхемаКомпоновкиДанных.Параметры.Добавить();
	НоваяСтрокаПараметр.Имя = СтруктураТипа.Наименование;
	НоваяСтрокаПараметр.ТипЗначения = СтруктураТипа.ОписаниеТипа;
	НоваяСтрокаПараметр.ДоступенСписокЗначений = СтруктураТипа.ДоступенСписок;
	НоваяСтрокаПараметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда; 
	
	ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресСКД);
	
	ИнициализироватьНастройкиСКД();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПараметр(Команда)
	УдалитьПараметрНаСервере(Элементы.КомпоновщикНастроекНастройкиПараметрыДанных.ТекущиеДанные.Параметр);
КонецПроцедуры

&НаСервере
Процедура УдалитьПараметрНаСервере(ИмяПараметра)
	
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСКД);
	
	ТекущийПараметр = СхемаКомпоновкиДанных.Параметры.Найти(ИмяПараметра);
	
	СхемаКомпоновкиДанных.Параметры.Удалить(ТекущийПараметр);
	
	ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресСКД);
	
	ИнициализироватьНастройкиСКД();
	
КонецПроцедуры
